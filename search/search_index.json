{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#6","title":"6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440","text":""},{"location":"#k4339","title":"\u0411\u043e\u0447\u043a\u0430\u0440\u044c \u0410\u0440\u0442\u0435\u043c \u0410\u0440\u0442\u0435\u043c\u043e\u0432\u0438\u0447 K4339","text":""},{"location":"lab-2/task1/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":""},{"location":"lab-2/task1/#1-threading-multiprocessing-async-python","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1: \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab-2/task1/#threading","title":"threading","text":"<pre><code>import threading\nimport time\n\ndef calculate_sum(start, end, result, index):\n  \"\"\"\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438 (\u0444\u043e\u0440\u043c\u0443\u043b\u0430 \u0413\u0430\u0443\u0441\u0441\u0430)\"\"\"\n  n = end - start + 1\n  result[index] = n * (start + end) // 2\n\ndef threading_sum(N, num_threads=4):\n  chunk_size = N // num_threads\n  threads = []\n  results = [0] * num_threads\n\n  start_time = time.time()\n\n  for i in range(num_threads):\n    start = i * chunk_size + 1\n    end = (i + 1) * chunk_size if i != num_threads - 1 else N\n    thread = threading.Thread(target=calculate_sum, args=(start, end, results, i))\n    threads.append(thread)\n    thread.start()\n\n  for thread in threads:\n    thread.join()\n\n  total = sum(results)\n  end_time = time.time()\n\n  print(f\"Threading sum: {total}\")\n  print(f\"Time: {end_time - start_time:.4f} seconds\")\n  print(f\"Threads used: {num_threads}\")\n\ndef verify_result(N):\n  \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u044b\"\"\"\n  expected = N * (N + 1) // 2\n  print(f\"Expected result: {expected}\")\n  return expected\n\nif __name__ == \"__main__\":\n  N = 1_000_000_000\n  print(f\"Calculating sum from 1 to {N:,}\")\n\n  # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\n  expected = verify_result(N)\n\n  # \u0417\u0430\u043f\u0443\u0441\u043a \u0441 \u0440\u0430\u0437\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f\n  for num_threads in [1, 2, 4, 8]:\n    print(f\"\\n--- Using {num_threads} threads ---\")\n    threading_sum(N, num_threads)\n</code></pre>"},{"location":"lab-2/task1/#_1","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u0434\u0430:","text":""},{"location":"lab-2/task1/#_2","title":"\u0412\u044b\u0432\u043e\u0434:","text":"<p>\u041f\u043b\u044e\u0441\u044b:</p> <ul> <li>\u041b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u044b\u0435 (\u043c\u0430\u043b\u043e \u043f\u0430\u043c\u044f\u0442\u0438)</li> <li>\u0411\u044b\u0441\u0442\u0440\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435/\u0443\u043d\u0438\u0447\u0442\u043e\u0436\u0435\u043d\u0438\u0435</li> <li>\u041e\u0431\u0449\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c (\u043b\u0435\u0433\u043a\u043e \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438)</li> <li>\u0425\u043e\u0440\u043e\u0448\u043e \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b:</p> <ul> <li>GIL \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442 CPU-bound \u0437\u0430\u0434\u0430\u0447\u0438</li> <li>\u041d\u0435\u0442 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0430 \u043d\u0430 \u043c\u043d\u043e\u0433\u043e\u044f\u0434\u0435\u0440\u043d\u044b\u0445 CPU</li> <li>\u0421\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0438\u0441\u0438</li> </ul> <p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c?</p> <ul> <li>\u041c\u043d\u043e\u0433\u043e I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u0441\u0435\u0442\u044c, \u0444\u0430\u0439\u043b\u044b, \u0411\u0414)</li> <li>GUI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0430\u043b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441)</li> <li>\u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u044b (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432)</li> <li>\u0417\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435\u043c</li> </ul>"},{"location":"lab-2/task1/#multiprocessing","title":"multiprocessing","text":"<pre><code>import multiprocessing\nimport time\n\ndef calculate_sum(start, end, result_queue):\n    \"\"\"\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438\"\"\"\n    n = end - start + 1\n    partial_sum = n * (start + end) // 2\n    result_queue.put(partial_sum)\n\ndef multiprocessing_sum(N, num_processes=4):\n    chunk_size = N // num_processes\n    processes = []\n    result_queue = multiprocessing.Queue()\n\n    start_time = time.time()\n\n    for i in range(num_processes):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size if i != num_processes - 1 else N\n        process = multiprocessing.Process(\n            target=calculate_sum, \n            args=(start, end, result_queue)\n        )\n        processes.append(process)\n        process.start()\n\n    # \u0416\u0434\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432\n    for process in processes:\n        process.join()\n\n    # \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\n    total = 0\n    for _ in range(num_processes):\n        total += result_queue.get()\n\n    end_time = time.time()\n\n    print(f\"Multiprocessing sum: {total}\")\n    print(f\"Time: {end_time - start_time:.4f} seconds\")\n    print(f\"Processes used: {num_processes}\")\n    return end_time - start_time\n\ndef verify_result(N):\n    \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\"\"\"\n    expected = N * (N + 1) // 2\n    print(f\"Expected result: {expected}\")\n    return expected\n\nif __name__ == \"__main__\":\n    N = 1_000_000_000\n    print(f\"Calculating sum from 1 to {N:,}\")\n\n    expected = verify_result(N)\n\n    times = {}\n    for num_processes in [1, 2, 4, 8]:\n        print(f\"\\n--- Using {num_processes} processes ---\")\n        duration = multiprocessing_sum(N, num_processes)\n        times[num_processes] = duration\n</code></pre>"},{"location":"lab-2/task1/#_3","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u0434\u0430:","text":""},{"location":"lab-2/task1/#_4","title":"\u0412\u044b\u0432\u043e\u0434:","text":"<p>\u041f\u043b\u044e\u0441\u044b:</p> <ul> <li>\u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0441\u0435 \u044f\u0434\u0440\u0430 CPU)</li> <li>\u041d\u0435\u0442 GIL \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439</li> <li>\u0418\u0437\u043e\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 (\u043e\u0434\u0438\u043d \u0443\u043f\u0430\u043b - \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442)</li> <li>\u041b\u0443\u0447\u0448\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b:</p> <ul> <li>\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u0438</li> <li>\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432</li> <li>\u0421\u043b\u043e\u0436\u043d\u0435\u0435 \u043e\u0431\u043c\u0435\u043d \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (\u043e\u0447\u0435\u0440\u0435\u0434\u0438, \u043f\u0430\u0439\u043f\u044b)</li> </ul> <p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c?</p> <ul> <li>\u0418\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (CPU-bound)</li> <li>\u041d\u0430\u0443\u0447\u043d\u044b\u0435 \u0440\u0430\u0441\u0447\u0435\u0442\u044b</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b</li> </ul>"},{"location":"lab-2/task1/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\n\nasync def calculate_sum_async(start, end):\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0438\u0438\"\"\"\n  n = end - start + 1\n  # \u0418\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u043c \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e (\u0445\u043e\u0442\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435)\n  await asyncio.sleep(0.000001)  # \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u0443\u0437\u0430 \u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n  return n * (start + end) // 2\n\n\nasync def async_sum(N, num_tasks=4):\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b\"\"\"\n  chunk_size = N // num_tasks\n  tasks = []\n\n  start_time = time.time()\n\n  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438\n  for i in range(num_tasks):\n    start = i * chunk_size + 1\n    end = (i + 1) * chunk_size if i != num_tasks - 1 else N\n    task = asyncio.create_task(calculate_sum_async(start, end))\n    tasks.append(task)\n\n  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\n  results = await asyncio.gather(*tasks)\n  total = sum(results)\n\n  end_time = time.time()\n\n  print(f\"Async sum: {total}\")\n  print(f\"Time: {end_time - start_time:.4f} seconds\")\n  print(f\"Tasks used: {num_tasks}\")\n  return end_time - start_time\n\n\ndef verify_result(N):\n  \"\"\"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\"\"\"\n  expected = N * (N + 1) // 2\n  print(f\"Expected result: {expected}\")\n  return expected\n\n\nasync def main():\n  N = 1_000_000_000\n  print(f\"Calculating sum from 1 to {N:,}\")\n\n  expected = verify_result(N)\n\n  times_async = {}\n  for num_tasks in [1, 2, 4, 8]:\n    print(f\"\\n--- Using {num_tasks} tasks ---\")\n    duration = await async_sum(N, num_tasks)\n    times_async[num_tasks] = duration\n\n  return times_async\n\n\nif __name__ == \"__main__\":\n  times = asyncio.run(main())\n</code></pre>"},{"location":"lab-2/task1/#_5","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u0434\u0430:","text":""},{"location":"lab-2/task1/#_6","title":"\u0412\u044b\u0432\u043e\u0434:","text":"<p>\u041f\u043b\u044e\u0441\u044b:</p> <ul> <li>\u041e\u0447\u0435\u043d\u044c \u043b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u044b\u0435 (\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b)</li> <li>\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0434\u043b\u044f I/O-bound</li> <li>\u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 CPU</li> </ul> <p>\u041c\u0438\u043d\u0443\u0441\u044b:</p> <ul> <li>\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound</li> <li>\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u044e\u0449\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438</li> <li>\u041a\u0440\u0438\u0432\u0430\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f</li> </ul> <p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c?</p> <ul> <li>\u041c\u043d\u043e\u0433\u043e I/O \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u0441\u0435\u0442\u044c, \u0411\u0414, \u0444\u0430\u0439\u043b\u044b)</li> <li>\u0412\u0430\u0436\u043d\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432</li> <li>\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0435 \u0441 \u0432\u0435\u0431-\u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438\u043b\u0438 real-time \u0434\u0430\u043d\u043d\u044b\u043c\u0438</li> </ul>"},{"location":"lab-2/task1/#_7","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435","text":"Method Time for 1M (sec) threading 0.0001 multiprocessing 0.0486 async 0.0002 <p>\u0414\u043b\u044f CPU-\u0437\u0430\u0434\u0430\u0447 (\u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0430) Multiprocessing \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p> <p>\u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430\u0434 I/O-\u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 (\u0441\u0435\u0442\u044c, \u0444\u0430\u0439\u043b\u044b) Threading \u0438\u043b\u0438 Async \u0431\u044b\u043b\u0438 \u0431\u044b \u043b\u0443\u0447\u0448\u0435. \u041d\u043e \u0434\u0430\u0436\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0431\u043e\u0440\u044c\u0431\u0430. Async \u043b\u0443\u0447\u0448\u0435 Threading \u0434\u043b\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 I/O-\u0441\u0438\u0441\u0442\u0435\u043c (\u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u044b), \u0445\u043e\u0442\u044f Threading \u0438 \u043f\u0440\u043e\u0449\u0435 \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438, \u043d\u043e \u043d\u0435 \u0434\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043d\u0430 CPU</p>"},{"location":"lab-2/task2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":""},{"location":"lab-2/task2/#2-","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2: \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab-2/task2/#_1","title":"\u041e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434","text":"<pre><code>import requests\nfrom bs4 import BeautifulSoup\nfrom sqlmodel import Session, create_engine, delete\nimport time\nfrom models import *\nfrom typing import List\n\n\nDATABASE_URL = \"postgresql://postgres:superuser@localhost:5432/book_exchange_db\"\nengine = create_engine(DATABASE_URL)\nSQLModel.metadata.create_all(engine)\n\nURLS = [\n    \"https://www.livelib.ru/author/103808/top-artur-konan-dojl\",\n    \"https://www.livelib.ru/author/1781/top-agata-kristi\",\n    \"https://www.livelib.ru/author/4389/top-sharlotta-bronte\"\n]\n\n\ndef clear_database():\n  \"\"\"\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b\"\"\"\n  with Session(engine) as session:\n    # \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u043a\u043d\u0438\u0433\u0438 (\u0438\u0437-\u0437\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043b\u044e\u0447\u0435\u0439)\n    session.exec(delete(Book))\n    # \u0417\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0438\n    session.exec(delete(Profile))\n    session.commit()\n  print(\"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0447\u0438\u0449\u0435\u043d\u0430\")\n\n\ndef create_default_profile():\n  \"\"\"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441 id=1\"\"\"\n  with Session(engine) as session:\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0441 \u044f\u0432\u043d\u044b\u043c id=1\n    default_profile = Profile(\n      id=1,  # \u042f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c id\n      username=\"default_user\",\n      name=\"Default\",\n      surname=\"User\",\n      age=30,\n      gender=Gender.MALE,\n      address=\"Default address\"\n    )\n    session.add(default_profile)\n    session.commit()\n    print(\"\u0421\u043e\u0437\u0434\u0430\u043d \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441 id=1\")\n\n\ndef parse_books(url: str) -&gt; List[BookBase]:\n  \"\"\"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u043a\u043d\u0438\u0433 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0432\u0442\u043e\u0440\u0430\"\"\"\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n    soup = BeautifulSoup(response.text, 'html.parser')\n    author = soup.find('div', class_='author-header__name').text.strip()\n\n    books = []\n    for book_item in soup.find_all('div', class_='book-item__inner'):\n      title = book_item.find('a', class_='book-item__title')\n      if title:\n        title = title.text.strip()\n      else:\n        continue\n\n      description = book_item.find('p')\n      description = \".\".join(description.text.strip().split(\".\")[:3]) + \".\" if description else None\n\n      books.append(BookBase(\n        title=title,\n        author=author,\n        description=description,\n      ))\n\n    return books\n  except Exception as e:\n    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 {url}: {e}\")\n    return []\n\n\ndef save_books(books: List[BookBase]):\n  \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0411\u0414\"\"\"\n  try:\n    with Session(engine) as session:\n      for book_data in books:\n        book = Book(**book_data.model_dump(), owner_id=1)\n        session.add(book)\n      session.commit()\n  except Exception as e:\n    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043d\u0438\u0433: {e}\")\n</code></pre>"},{"location":"lab-2/task2/#threading","title":"threading","text":""},{"location":"lab-2/task2/#_2","title":"\u041a\u043e\u0434:","text":"<pre><code>import threading\n\n# \u0421\u044e\u0434\u0430 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434\n\ndef parse_and_save(url: str):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0442\u043e\u043a\u0430: \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\"\"\"\n    print(f\"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 {url}\")\n    books = parse_books(url)\n    save_books(books)\n    print(f\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e {len(books)} \u043a\u043d\u0438\u0433 \u0441 {url}\")\n\n\ndef main():\n    start_time = time.time()\n\n    clear_database()\n\n    create_default_profile()\n\n    threads = []\n    for url in URLS:\n        thread = threading.Thread(target=parse_and_save, args=(url,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    end_time = time.time()\n    print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab-2/task2/#_3","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430:","text":"<p>\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.48 \u0441\u0435\u043a\u0443\u043d\u0434</p>"},{"location":"lab-2/task2/#_4","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:","text":"<p>\u0410\u0440\u0442\u0443\u0440 \u041a\u043e\u043d\u0430\u043d \u0414\u043e\u0439\u043b\u044c</p> <p></p> <p>\u0410\u0433\u0430\u0442\u0430 \u041a\u0440\u0438\u0441\u0442\u0438</p> <p></p> <p>\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u0430 \u0411\u0440\u043e\u043d\u0442\u0435</p> <p></p>"},{"location":"lab-2/task2/#multiprocessing","title":"multiprocessing","text":""},{"location":"lab-2/task2/#_5","title":"\u041a\u043e\u0434:","text":"<pre><code>import multiprocessing\nfrom multiprocessing import Pool\n\n# \u0421\u044e\u0434\u0430 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434\n\ndef parse_and_save(url: str):\n  \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430: \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\"\"\"\n  print(f\"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 {url}\")\n  books = parse_books(url)\n  if books:\n    save_books(books)\n    print(f\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e {len(books)} \u043a\u043d\u0438\u0433 \u0441 {url}\")\n  else:\n    print(f\"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438 \u0441 {url}\")\n\n\ndef main():\n  start_time = time.time()\n\n  # \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435\n  clear_database()\n  create_default_profile()\n\n  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0443\u043b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432\n  with Pool(processes=len(URLS)) as pool:\n    # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL\n    pool.map(parse_and_save, URLS)\n\n  end_time = time.time()\n  print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\n\nif __name__ == \"__main__\":\n  # \u0414\u043b\u044f multiprocessing \u0432 Windows \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e\n  multiprocessing.freeze_support()\n  main()\n</code></pre>"},{"location":"lab-2/task2/#_6","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430:","text":"<p>\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.79 \u0441\u0435\u043a\u0443\u043d\u0434</p>"},{"location":"lab-2/task2/#_7","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:","text":"<p>\u0410\u0440\u0442\u0443\u0440 \u041a\u043e\u043d\u0430\u043d \u0414\u043e\u0439\u043b\u044c</p> <p></p> <p>\u0410\u0433\u0430\u0442\u0430 \u041a\u0440\u0438\u0441\u0442\u0438</p> <p></p> <p>\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u0430 \u0411\u0440\u043e\u043d\u0442\u0435</p> <p></p>"},{"location":"lab-2/task2/#async","title":"async","text":""},{"location":"lab-2/task2/#_8","title":"\u041a\u043e\u0434:","text":"<pre><code>import aiohttp\nimport asyncio\nimport ssl\n\n# \u0421\u044e\u0434\u0430 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u0434 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044b \u0431\u0435\u0437 async\n\nasync def fetch(url):\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 HTML \u0441 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 SSL\"\"\"\n  ssl_context = ssl.create_default_context()\n  ssl_context.check_hostname = False\n  ssl_context.verify_mode = ssl.CERT_NONE\n\n  connector = aiohttp.TCPConnector(ssl=ssl_context)\n  async with aiohttp.ClientSession(connector=connector) as session:\n    async with session.get(url) as response:\n      return await response.text()\n\n\nasync def parse_books(url: str) -&gt; List[BookBase]:\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043a\u043d\u0438\u0433 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0432\u0442\u043e\u0440\u0430\"\"\"\n  try:\n    html = await fetch(url)\n    soup = BeautifulSoup(html, 'html.parser')\n    author = soup.find('div', class_='author-header__name').text.strip()\n\n    books = []\n    for book_item in soup.find_all('div', class_='book-item__inner'):\n      title = book_item.find('a', class_='book-item__title')\n      if title:\n        title = title.text.strip()\n      else:\n        continue\n\n      description = book_item.find('p')\n      description = \".\".join(description.text.strip().split(\".\")[:3]) + \".\" if description else None\n\n      books.append(BookBase(\n        title=title,\n        author=author,\n        description=description,\n      ))\n\n    return books\n  except Exception as e:\n    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 {url}: {e}\")\n    return []\n\n\nasync def save_books(books: List[BookBase]):\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0411\u0414\"\"\"\n  try:\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c asyncio.to_thread \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0411\u0414\n    await asyncio.to_thread(_sync_save_books, books)\n  except Exception as e:\n    print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043a\u043d\u0438\u0433: {e}\")\n\n\ndef _sync_save_books(books: List[BookBase]):\n  \"\"\"\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\"\"\"\n  with Session(engine) as session:\n    for book_data in books:\n      book = Book(**book_data.model_dump(), owner_id=1)\n      session.add(book)\n    session.commit()\n\n\nasync def parse_and_save(url: str):\n  \"\"\"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430: \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\"\"\"\n  print(f\"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 {url}\")\n  books = await parse_books(url)\n  if books:\n    await save_books(books)\n    print(f\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e {len(books)} \u043a\u043d\u0438\u0433 \u0441 {url}\")\n  else:\n    print(f\"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438 \u0441 {url}\")\n\n\nasync def main():\n  start_time = time.time()\n\n  # \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0444\u0438\u043b\u044c (\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438)\n  clear_database()\n  create_default_profile()\n\n  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e URL\n  tasks = [parse_and_save(url) for url in URLS]\n  # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\n  await asyncio.gather(*tasks)\n\n  end_time = time.time()\n  print(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time:.2f} \u0441\u0435\u043a\u0443\u043d\u0434\")\n\n\nif __name__ == \"__main__\":\n  asyncio.run(main())\n</code></pre>"},{"location":"lab-2/task2/#_9","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430:","text":"<p>\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.46 \u0441\u0435\u043a\u0443\u043d\u0434</p>"},{"location":"lab-2/task2/#_10","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:","text":"<p>\u0410\u0440\u0442\u0443\u0440 \u041a\u043e\u043d\u0430\u043d \u0414\u043e\u0439\u043b\u044c</p> <p></p> <p>\u0410\u0433\u0430\u0442\u0430 \u041a\u0440\u0438\u0441\u0442\u0438</p> <p></p> <p>\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u0430 \u0411\u0440\u043e\u043d\u0442\u0435</p> <p></p> Method Time for 1M (sec) threading 0.48 multiprocessing 0.79 async 0.46 <p>Multiprocessing \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u0438\u0445\u0443\u0434\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0437-\u0437\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0411\u0414 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435.</p> <p>Threading \u0438 Async \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0441\u0445\u043e\u0436\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, \u043d\u043e \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0441\u0451 \u0436\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e: - \u041d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043c\u0435 \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u0430\u043b\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 URL, - \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b.</p>"},{"location":"practice-1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 FastAPI","text":""},{"location":"practice-1/#1-fastapi_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0417\u0430\u043f\u0443\u0441\u043a FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef hello():\n    return \"Hello, artboch!\"\n</code></pre>"},{"location":"practice-1/#2-bookcrossing","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 BookCrossing \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442, \u0430\u0434\u0430\u043f\u0442\u0430\u0446\u0438\u0438 \u043a \u043d\u043e\u0432\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0430\u044f \u0434\u0432\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b: \"\u041f\u0440\u043e\u0444\u0438\u043b\u044c\" \u0438 \"\u041a\u043d\u0438\u0433\u0430\"</p> <pre><code>from pydantic import BaseModel\n\nclass Profile(BaseModel):\n  id: Optional[int] = None\n  username: str\n  name: str\n  surname: str\n  age: int\n  address: Optional[str] = None\n  books: List['Book'] = []\n\nclass Book(BaseModel):\n  id: Optional[int] = None\n  title: str\n  author: str\n  genre: Optional[str] = None\n  owner_id: int\n</code></pre>"},{"location":"practice-1/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>test_db = [\n  {\n    \"id\": 1,\n    \"username\": \"artboch\",\n    \"name\": \"\u0410\u0440\u0442\u0435\u043c\",\n    \"surname\": \"\u0411\u043e\u0447\u043a\u0430\u0440\u044c\",\n    \"age\": 23,\n    \"address\": \"\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, \u0420\u0430\u0437\u044a\u0435\u0437\u0436\u0430\u044f \u0443\u043b\u0438\u0446\u0430, \u0434\u043e\u043c 5, \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 3\",\n    \"books\": [\n      {\n        \"id\": 1,\n        \"title\": \"\u0428\u0435\u0440\u043b\u043e\u043a \u0425\u043e\u043b\u043c\u0441\",\n        \"author\": \"\u0410\u0440\u0442\u0443\u0440 \u041a\u043e\u043d\u0430\u043d \u0414\u043e\u0439\u043b\",\n        \"genre\": \"\u0414\u0435\u0442\u0435\u043a\u0442\u0438\u0432\",\n        \"owner_id\": 1\n      }\n    ]\n  },\n  {\n    \"id\": 2,\n    \"username\": \"killer\",\n    \"name\": \"\u041e\u043b\u0435\u0433\",\n    \"surname\": \"\u041f\u0435\u0442\u0440\u043e\u0432\",\n    \"age\": 19,\n    \"address\": \"\u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433, \u041f\u0440\u043e\u043b\u0435\u0442\u0430\u0440\u0441\u043a\u0430\u044f \u0443\u043b\u0438\u0446\u0430, \u0434\u043e\u043c 13, \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 288\",\n    \"books\": [\n      {\n        \"id\": 2,\n        \"title\": \"\u0414\u0436\u0435\u0439\u043d \u042d\u0439\u0440\",\n        \"author\": \"\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u0430 \u0411\u0440\u043e\u043d\u0442\u0435\",\n        \"genre\": \"\u0420\u043e\u043c\u0430\u043d\",\n        \"owner_id\": 2\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"practice-1/#4-crud-","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 CRUD-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u041f\u0440\u043e\u0444\u0438\u043b\u044f","text":""},{"location":"practice-1/#_1","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0443\u0447\u0435\u043a:","text":""},{"location":"practice-1/#_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":"<pre><code>@app.post(\"/profile\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef create_profile(profile: Profile) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profile}):\n  max_id = max(prof[\"id\"] for prof in test_db) if test_db else 0\n  profile_data = profile.model_dump()\n  profile_data[\"id\"] = max_id + 1\n\n  for book in profile_data[\"books\"]:\n    book[\"owner_id\"] = profile_data[\"id\"]\n    if book.get(\"id\") is None:\n      all_books = [b for prof in test_db for b in prof[\"books\"]]\n      max_book_id = max(b[\"id\"] for b in all_books) if all_books else 0\n      book[\"id\"] = max_book_id + 1\n\n  test_db.append(profile_data)\n  return {\"status\": 200, \"data\": profile_data}\n</code></pre>"},{"location":"practice-1/#_3","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439:","text":"<pre><code>@app.get(\"/profiles\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef get_profiles() -&gt; List[Profile]:\n  return test_db\n</code></pre>"},{"location":"practice-1/#id","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0435\u0433\u043e id:","text":"<pre><code>@app.get(\"/profile/{profile_id}\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef get_profile(profile_id: int) -&gt; Profile:\n  profile = next((prof for prof in test_db if prof.get(\"id\") == profile_id), None)\n  if profile is None:\n    raise HTTPException(status_code=404, detail=\"Profile not found\")\n  return profile\n</code></pre>"},{"location":"practice-1/#_4","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:","text":"<pre><code>@app.put(\"/profile/{profile_id}\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef update_profile(profile_id: int, profile: Profile) -&gt; Profile:\n  for i, prof in enumerate(test_db):\n    if prof.get(\"id\") == profile_id:\n      profile_data = profile.model_dump()\n      profile_data[\"id\"] = profile_id\n\n      for book in profile_data[\"books\"]:\n        book[\"owner_id\"] = profile_id\n\n      test_db[i] = profile_data\n      return profile_data\n\n  raise HTTPException(status_code=404, detail=\"Profile not found\")\n</code></pre>"},{"location":"practice-1/#_5","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":"<pre><code>@app.delete(\"/profile/{profile_id}\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef delete_profile(profile_id: int):\n  for i, prof in enumerate(test_db):\n    if prof.get(\"id\") == profile_id:\n      test_db.pop(i)\n      return {\"status\": 200, \"message\": \"Profile deleted successfully\"}\n\n  raise HTTPException(status_code=404, detail=\"Profile not found\")\n</code></pre>"},{"location":"practice-1/#4-crud-_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 CRUD-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043b\u044f \u041a\u043d\u0438\u0433","text":""},{"location":"practice-1/#_6","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u0440\u0443\u0447\u0435\u043a:","text":""},{"location":"practice-1/#_7","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438:","text":"<pre><code>@app.post(\"/book\", response_model=schemas.BookRead, tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef create_book(book: schemas.BookCreate, session: Session = Depends(get_session)):\n  if book.owner_id is not None:\n    owner = session.get(models.Profile, book.owner_id)\n    if not owner:\n      raise HTTPException(status_code=404, detail=\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  db_book = models.Book(**book.dict())\n  session.add(db_book)\n  session.commit()\n  session.refresh(db_book)\n  return db_book\n</code></pre>"},{"location":"practice-1/#_8","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043d\u0438\u0433:","text":"<pre><code>@app.get(\"/books\", response_model=List[schemas.BookRead], tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef get_books(session: Session = Depends(get_session)):\n  books = session.exec(select(models.Book)).all()\n  return books\n</code></pre>"},{"location":"practice-1/#id_1","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u043f\u043e id:","text":"<pre><code>@app.get(\"/book/{book_id}\", response_model=schemas.BookRead, tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef get_book(book_id: int, session: Session = Depends(get_session)):\n  book = session.get(models.Book, book_id)\n  if not book:\n    raise HTTPException(status_code=404, detail=\"\u041a\u043d\u0438\u0433\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n  return book\n</code></pre>"},{"location":"practice-1/#id_2","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u043f\u043e id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":"<pre><code>@app.get(\"/profile/{profile_id}/books\", response_model=List[schemas.BookRead], tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef get_books_by_owner(profile_id: int, session: Session = Depends(get_session)):\n  owner = session.get(models.Profile, profile_id)\n  if not owner:\n    raise HTTPException(status_code=404, detail=\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  books = session.exec(\n    select(models.Book).where(models.Book.owner_id == profile_id)\n  ).all()\n  return books\n</code></pre>"},{"location":"practice-1/#_9","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043d\u0438\u0433\u0438:","text":"<pre><code>@app.put(\"/book/{book_id}\", response_model=schemas.BookRead, tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef update_book(\n    book_id: int,\n    book_update: schemas.BookUpdate,\n    session: Session = Depends(get_session)\n):\n\n  db_book = session.get(models.Book, book_id)\n  if not db_book:\n    raise HTTPException(status_code=404, detail=\"\u041a\u043d\u0438\u0433\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n\n  if book_update.owner_id is not None:\n    owner = session.get(models.Profile, book_update.owner_id)\n    if not owner:\n      raise HTTPException(status_code=404, detail=\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  update_data = book_update.dict(exclude_unset=True)\n  for key, value in update_data.items():\n    setattr(db_book, key, value)\n\n  session.add(db_book)\n  session.commit()\n  session.refresh(db_book)\n  return db_book\n</code></pre>"},{"location":"practice-1/#_10","title":"\u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438:","text":"<pre><code>@app.delete(\"/book/{book_id}\", tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef delete_book(book_id: int, session: Session = Depends(get_session)):\n  book = session.get(models.Book, book_id)\n  if not book:\n    raise HTTPException(status_code=404, detail=\"\u041a\u043d\u0438\u0433\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n\n  active_requests = session.exec(\n    select(models.ExchangeRequest).where(\n      models.ExchangeRequest.book_id == book_id,\n      models.ExchangeRequest.status == models.RequestStatus.PENDING\n    )\n  ).all()\n\n  if active_requests:\n    raise HTTPException(\n      status_code=400,\n      detail=\"\u041d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0437\u0430\u044f\u0432\u043a\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d\"\n    )\n\n  session.delete(book)\n  session.commit()\n  return {\"message\": \"\u041a\u043d\u0438\u0433\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\"}\n</code></pre>"},{"location":"practice-2/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0411\u0414, SQLModel \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 Alembic","text":""},{"location":"practice-2/#sqlmodel","title":"SQLModel. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0421\u0423\u0411\u0414 PostgreSQL \u0447\u0435\u0440\u0435\u0437 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0432\u043e\u0434\u0438\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0432 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435: <code>pip install sqlmodel</code>, <code>pip install psycopg2-binary</code></p>"},{"location":"practice-2/#-connectionpy","title":"\u0424\u0430\u0439\u043b \u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a \u0411\u0414 - connection.py","text":"<pre><code>from sqlmodel import SQLModel, Session, create_engine\n\ndb_url = 'postgresql://postgres:superuser@localhost:5432/book_exchange_db'\n\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n  SQLModel.metadata.drop_all(engine)\n  SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"practice-2/#modelspy-postgresql","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0444\u0430\u0439\u043b models.py, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438\u0441\u044c \u0441 PostgreSQL \u0421\u0423\u0411\u0414.","text":"<pre><code># Enum \u0434\u043b\u044f \u043f\u043e\u043b\u044f \u043f\u043e\u043b\u0430\nclass Gender(str, Enum):\n  MALE = \"male\"\n  FEMALE = \"female\"\n\n\n# Enum \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u044f\u0432\u043a\u0438\nclass RequestStatus(str, Enum):\n  PENDING = \"pending\"\n  ACCEPTED = \"accepted\"\n  REJECTED = \"rejected\"\n\n\n# \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\nclass ProfileBase(SQLModel):\n  username: str = Field(index=True, unique=True)\n  name: str\n  surname: str\n  age: int\n  gender: Gender\n  address: Optional[str] = None\n\n\nclass BookBase(SQLModel):\n  title: str\n  author: str\n  genre: Optional[str] = None\n  description: Optional[str] = None\n  pages: int | None\n\n\nclass ExchangeRequestBase(SQLModel):\n  status: RequestStatus = Field(default=RequestStatus.PENDING)\n\n\n# \u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445\nclass Profile(ProfileBase, table=True):\n  id: Optional[int] = Field(default=None, primary_key=True)\n  created_at: datetime = Field(default_factory=datetime.utcnow)\n\n  books: List[\"Book\"] = Relationship(back_populates=\"owner\")\n  sent_requests: List[\"ExchangeRequest\"] = Relationship(back_populates=\"requester\")\n\n\nclass Book(BookBase, table=True):\n  id: Optional[int] = Field(default=None, primary_key=True)\n  owner_id: Optional[int] = Field(default=None, foreign_key=\"profile.id\")\n  created_at: datetime = Field(default_factory=datetime.utcnow)\n\n  owner: Optional[Profile] = Relationship(back_populates=\"books\")\n  requests: List[\"ExchangeRequest\"] = Relationship(back_populates=\"book\")\n\n\nclass ExchangeRequest(ExchangeRequestBase, table=True):\n  id: Optional[int] = Field(default=None, primary_key=True)\n  book_id: int = Field(foreign_key=\"book.id\")\n  requester_id: int = Field(foreign_key=\"profile.id\")\n  created_at: datetime = Field(default_factory=datetime.utcnow)\n\n  book: \"Book\" = Relationship(back_populates=\"requests\")\n  requester: \"Profile\" = Relationship(back_populates=\"sent_requests\")\n</code></pre> <p>\u041f\u043e\u043c\u0438\u043c\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043b \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435. \u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 - \u044d\u0442\u043e \u0442\u0435, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e\u0442\u0441\u044f \u043e\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432 \u0441\u0435\u0431\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0439 id \u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u043d\u043e\u0433\u0438\u0435-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c.</p>"},{"location":"practice-2/#_1","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b","text":""},{"location":"practice-2/#_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 (\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f)","text":"<pre><code>@app.post(\"/profile\", response_model=schemas.ProfileRead, tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef create_profile(profile: schemas.ProfileCreate, session: Session = Depends(get_session)):\n  existing = session.exec(\n    select(models.Profile).where(models.Profile.username == profile.username)\n  ).first()\n  if existing:\n    raise HTTPException(status_code=400, detail=\"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0443\u0436\u0435 \u0437\u0430\u043d\u044f\u0442\u043e\")\n\n  db_profile = models.Profile.model_validate(profile)\n  session.add(db_profile)\n  session.commit()\n  session.refresh(db_profile)\n  return db_profile\n</code></pre> <p>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443: \u0412 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c ProfileCreate \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 dependency injection \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e session=Depends(get_session).</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0441 \u0442\u0430\u043a\u0438\u043c \u0436\u0435 username. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0430 HTTP 400 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c.</p> <p>\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u043c\u0435\u0442\u043e\u0434 model_validate \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e ORM-\u043c\u043e\u0434\u0435\u043b\u044c, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0443\u044e \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u0442\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 session.add, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u043c commit, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 refresh.</p> <p>\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 ProfileRead \u0441 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043e\u0442\u0432\u0435\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c response_model.</p>"},{"location":"practice-2/#_3","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 (\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f)","text":"<pre><code>@app.get(\"/profiles\", response_model=List[schemas.ProfileRead], tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef get_profiles(session: Session = Depends(get_session)):\n  profiles = session.exec(select(models.Profile)).all()\n  return profiles\n\n\n@app.get(\"/profile/{profile_id}\", response_model=schemas.ProfileWithBooks, tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef get_profile(profile_id: int, session: Session = Depends(get_session)):\n  profile = session.get(models.Profile, profile_id)\n  if not profile:\n    raise HTTPException(status_code=404, detail=\"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n  return profile\n\n@app.get(\"/profile/{profile_id}/books\", response_model=List[schemas.BookRead], tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef get_books_by_owner(profile_id: int, session: Session = Depends(get_session)):\n  owner = session.get(models.Profile, profile_id)\n  if not owner:\n    raise HTTPException(status_code=404, detail=\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  books = session.exec(\n    select(models.Book).where(models.Book.owner_id == profile_id)\n  ).all()\n  return books\n\n@app.get(\"/profile/{profile_id}/with-books\", response_model=schemas.ProfileWithBooks, tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef get_profile_with_books(profile_id: int, session: Session = Depends(get_session)):\n  profile = session.get(models.Profile, profile_id)\n  if not profile:\n    raise HTTPException(status_code=404, detail=\"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  return profile\n</code></pre> <p>\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0432 \u041f\u0440\u043e\u0444\u0438\u043b\u0435 \u0435\u0441\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u041a\u043d\u0438\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 get-\u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0430 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438\u0445 id. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b</p> <p></p>"},{"location":"practice-2/#_4","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0438","text":"<p>\u0422\u0435\u043f\u0435\u0440\u044c, \u0432\u043c\u0435\u0441\u0442\u043e PUT-\u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u043a\u043e\u0434\u0435 API \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f PATCH \u0434\u043b\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"practice-2/#_5","title":"\u041d\u043e\u0432\u0430\u044f \u0441\u0445\u0435\u043c\u0430","text":"<pre><code>class ProfileUpdate(SQLModel):\n  username: Optional[str] = None\n  name: Optional[str] = None\n  surname: Optional[str] = None\n  age: Optional[int] = None\n  gender: Optional[Gender] = None\n  address: Optional[str] = None\n\nclass BookUpdate(SQLModel):\n  title: Optional[str] = None\n  author: Optional[str] = None\n  genre: Optional[str] = None\n  description: Optional[str] = None\n  pages: Optional[int] = None\n  owner_id: Optional[int] = None\n</code></pre>"},{"location":"practice-2/#_6","title":"\u041d\u043e\u0432\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>@app.patch(\"/profile/{profile_id}\", response_model=schemas.ProfileRead, tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef update_profile(\n    profile_id: int,\n    profile_update: schemas.ProfileUpdate,\n    session: Session = Depends(get_session)\n):\n    db_profile = session.get(models.Profile, profile_id)\n    if not db_profile:\n        raise HTTPException(status_code=404, detail=\"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c username \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043e\u043d \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f\n    if profile_update.username and db_profile.username != profile_update.username:\n        existing = session.exec(\n            select(models.Profile).where(models.Profile.username == profile_update.username)\n        ).first()\n        if existing:\n            raise HTTPException(status_code=400, detail=\"\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0443\u0436\u0435 \u0437\u0430\u043d\u044f\u0442\u043e\")\n\n    # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f\n    update_data = profile_update.dict(exclude_unset=True)\n    for key, value in update_data.items():\n        setattr(db_profile, key, value)\n\n    session.add(db_profile)\n    session.commit()\n    session.refresh(db_profile)\n    return db_profile\n\n@app.patch(\"/book/{book_id}\", response_model=schemas.BookRead, tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef update_book(\n    book_id: int,\n    book_update: schemas.BookUpdate,\n    session: Session = Depends(get_session)\n):\n    db_book = session.get(models.Book, book_id)\n    if not db_book:\n        raise HTTPException(status_code=404, detail=\"\u041a\u043d\u0438\u0433\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043e\u043d \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f\n    if book_update.owner_id is not None and book_update.owner_id != db_book.owner_id:\n        owner = session.get(models.Profile, book_update.owner_id)\n        if not owner:\n            raise HTTPException(status_code=404, detail=\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n    # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f\n    update_data = book_update.dict(exclude_unset=True)\n    for key, value in update_data.items():\n        setattr(db_book, key, value)\n\n    session.add(db_book)\n    session.commit()\n    session.refresh(db_book)\n    return db_book\n</code></pre>"},{"location":"practice-2/#_7","title":"\u041d\u043e\u0432\u044b\u0435 \u0440\u0443\u0447\u043a\u0438","text":""},{"location":"practice-2/#_8","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435","text":"<p>API \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0445\u043e\u0436\u0430\u044f \u043f\u043e \u043b\u043e\u0433\u0438\u043a\u0435 \u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\u043c. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0447\u0435\u0440\u0435\u0437 <code>delete</code></p> <pre><code>@app.delete(\"/profile/{profile_id}\", tags=[\"\u041f\u0440\u043e\u0444\u0438\u043b\u0438\"])\ndef delete_profile(profile_id: int, session: Session = Depends(get_session)):\n  profile = session.get(models.Profile, profile_id)\n  if not profile:\n    raise HTTPException(status_code=404, detail=\"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n\n  session.delete(profile)\n  session.commit()\n  return {\"message\": \"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u0443\u0434\u0430\u043b\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e\"}\n\n@app.delete(\"/book/{book_id}\", tags=[\"\u041a\u043d\u0438\u0433\u0438\"])\ndef delete_book(book_id: int, session: Session = Depends(get_session)):\n  book = session.get(models.Book, book_id)\n  if not book:\n    raise HTTPException(status_code=404, detail=\"\u041a\u043d\u0438\u0433\u0430 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n\n  active_requests = session.exec(\n    select(models.ExchangeRequest).where(\n      models.ExchangeRequest.book_id == book_id,\n      models.ExchangeRequest.status == models.RequestStatus.PENDING\n    )\n  ).all()\n\n  if active_requests:\n    raise HTTPException(\n      status_code=400,\n      detail=\"\u041d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0437\u0430\u044f\u0432\u043a\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d\"\n    )\n\n  session.delete(book)\n  session.commit()\n  return {\"message\": \"\u041a\u043d\u0438\u0433\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\"}\n</code></pre>"},{"location":"practice-3/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3: \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438, ENV, GitIgnore \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"practice-3/#alembic","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438. Alembic","text":"<p>\u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Alembic \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0448\u0435\u0439 \u0411\u0414. \u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443</p> <p></p> <p>\u0414\u0430\u043b\u0435\u0435 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443:</p> <ul> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 alembic.ini \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 sqlalchemy.url \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0430\u0434\u0440\u0435\u0441 \u0411\u0414, \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 connection.py</li> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 env.py \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0438\u0437 models.py \u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 target_metadata \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 target_metadata=SQLModel.metadata</li> <li>\u0412 \u0444\u0430\u0439\u043b\u0435 script.py.mako \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 sqlmodel</li> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b alembic revision --autogenerate -m \"message\"</li> <li>\u041f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b alembic upgrade head</li> </ul>"},{"location":"practice-3/#gitignore","title":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438 .gitignore","text":""},{"location":"practice-3/#gitignore_1","title":".gitignore","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u0440\u043d\u0435\u0432\u0443\u044e \u043f\u0430\u043f\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 .gitignore \u0444\u0430\u0439\u043b\u044b \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c:</p> <pre><code>.idea\n.ipynb_checkpoints\n.mypy_cache\n.vscode\n__pycache__\n.pytest_cache\nhtmlcov\ndist\nsite\n.coverage\ncoverage.xml\n.netlify\ntest.db\nlog.txt\nPipfile.lock\nenv3.*\nenv\ndocs_build\nsite_build\nvenv\ndocs.zip\narchive.zip\n*.env\n\n# vim temporary files\n*~\n.*.sw?\n.cache\n\n# macOS\n.DS_Store\n</code></pre>"},{"location":"practice-3/#env","title":".env","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c .env \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c:</p> <pre><code>DB_ADMIN=postgresql://postgres:superuser@localhost:5432/book_exchange_db\n</code></pre> <p>\u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c conection.py \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u044d\u043d\u0432\u0438\u043a\u043e\u043c:</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\ndb_url = os.getenv('DB_ADMIN')\n\nengine = create_engine(db_url, echo=True)\n\n\ndef init_db():\n  SQLModel.metadata.drop_all(engine)\n  SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"practice-3/#alembicini-url-env-","title":"\u041a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e .env-\u0444\u0430\u0439\u043b\u0430?","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b <code>env.py</code> \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 <code>alembic</code>, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438\u0437 <code>.env</code>. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>os</code> \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:</p> <pre><code>import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\nconfig.set_main_option(\"sqlalchemy.url\", os.getenv(\"DB_ADMIN\"))\n</code></pre> <p>\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 <code>sqlalchemy.url</code> \u0432 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code>, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043d\u0435 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432\u0430\u043b\u0430 \u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0438\u0437 <code>env.py</code>. \u042d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0432\u0438\u0434\u0435.</p>"}]}